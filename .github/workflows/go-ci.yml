name: GoApp-CI
on:
  push:
    branches: ["master"]
env:
  IMAGE_NAME: libra
  REGISTRY: ghcr.io
  RUN_CODE_SECURITY: false  # Set to true to enable code security checks

jobs:
  code-security:
    name: Code Security Checks
    runs-on: ubuntu-latest
    if: ${{ env.RUN_CODE_SECURITY == 'true' }}  # Skip this job based on environment variable
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'  # According to go.mod

      - name: Run gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

  build-and-release:
    name: Build, Scan and Release
    # Only needs code-security if it's running
    needs: ${{ env.RUN_CODE_SECURITY == 'true' && fromJSON('["code-security"]') || fromJSON('[]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "dvirmoyal25@gmail.com"
          git config --global user.name "dvir_moyal"

      - name: Install Commitizen
        run: |
          pip install commitizen

      - name: Bump version and create changelog
        id: bump
        run: |
          cz bump --yes
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check Dockerfile Security
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the image once and save it as a file
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          outputs: type=docker,dest=/tmp/docker-image.tar
          tags: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      # Scan the locally built image
      - name: Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          format: 'table'
          exit-code: '1'  # Fail if vulnerabilities found
          severity: 'CRITICAL,HIGH'

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: success()  # Only if scan passed
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Tag and push the already built image
      - name: Tag and Push Docker image
        if: success()  # Only if scan passed
        run: |
          # Load the image from file
          docker load --input /tmp/docker-image.tar
          
          # Tag the image with full registry name
          docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          
          # Push the tagged images to registry
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      # Create GitHub Release
      - name: Create GitHub Release
        if: success()  # Only if all previous steps succeeded
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            **Docker Image:**
            - Name: `${{ env.IMAGE_NAME }}`
            - Repository: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}`
            - Tags:
              - `latest`
              - `${{ env.VERSION }}`
            
            **Security Scan Status:**
            ${{ env.RUN_CODE_SECURITY == 'true' && '- Code security scan completed' || '- Code security scan skipped' }}
            - Dockerfile security scan completed
            - Container image scan completed and approved
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}